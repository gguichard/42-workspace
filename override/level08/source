#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>

void log_wrapper(FILE *file, char *message, char *filename)
{
	// canary at rbp-0x8
	char buffer[0xff];	// rbp-0x110

	strcpy(buffer, message);
	snprintf(buffer + strlen(buffer), (sizeof(buffer) - 2) - strlen(buffer), filename);
	buffer[strcspn(buffer, "\n")] = '\0';
	fprintf(file, "LOG: %s\n", buffer);
}

int main(int argc, char **argv)
{
	// canary at rbp-0x8
	char buffer[0x64];	// rbp-0x70
	char c;				// rbp-0x71
	int fd;				// rbp-0x78
	FILE *file;			// rbp-0x80
	FILE *backup;		// rbp-0x88

	if (argc != 2)
	{
		printf("Usage: %s filename\n", argv[0]);
	}
	backup = fopen("./backups/.log", "w");
	if (backup == NULL)
	{
		printf("ERROR: Failed to open %s\n", "./backups/.log");
		exit(1);
	}
	log_wrapper(backup, "Starting back up: ", argv[1]);
	file = fopen(argv[1], "r");
	if (file == NULL)
	{
		printf("ERROR: Failed to open %s\n", argv[1]);
		exit(1);
	}
	strcpy(buffer, "./backups/");
	strncat(buffer, argv[1], (sizeof(buffer) - 1) - strlen(buffer));
	fd = open(buffer, O_WRONLY | O_CREAT | O_EXCL, 0660);
	if (fd < 0)
	{
		printf("ERROR: Failed to open %s%s\n", "./backups/", argv[1]);
		exit(1);
	}
	while ((c = fgetc(file)) != EOF)
	{
		write(fd, &c, 1);
	}
	log_wrapper(backup, "Finished back up ", argv[1]);
	fclose(file);
	close(fd);
	return (0);
}
